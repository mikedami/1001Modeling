// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using _1001;

#nullable disable

namespace _1001.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251016151435_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("_1001.Artist", b =>
                {
                    b.Property<int>("ArtistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ArtistId"));

                    b.Property<string>("Country")
                        .HasColumnType("text")
                        .HasColumnName("country");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.HasKey("ArtistId");

                    b.ToTable("artists");
                });

            modelBuilder.Entity("_1001.DjSet", b =>
                {
                    b.Property<int>("DjSetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("dj_set_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("DjSetId"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasColumnName("duration_minutes");

                    b.Property<DateTime?>("SetDatetime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("set_datetime");

                    b.Property<string>("SourceUrl")
                        .HasColumnType("text")
                        .HasColumnName("source_url");

                    b.Property<string>("Title")
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.Property<int?>("VenueId")
                        .HasColumnType("integer")
                        .HasColumnName("venue_id");

                    b.HasKey("DjSetId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("VenueId");

                    b.ToTable("dj_sets");
                });

            modelBuilder.Entity("_1001.SetAnalytics", b =>
                {
                    b.Property<int>("DjSetId")
                        .HasColumnType("integer")
                        .HasColumnName("dj_set_id");

                    b.Property<int?>("AttendanceCount")
                        .HasColumnType("integer")
                        .HasColumnName("attendance_count");

                    b.Property<int?>("GrossRevenue")
                        .HasColumnType("integer")
                        .HasColumnName("gross_revenue");

                    b.Property<int?>("LikeCount")
                        .HasColumnType("integer")
                        .HasColumnName("like_count");

                    b.Property<int?>("StreamCount")
                        .HasColumnType("integer")
                        .HasColumnName("stream_count");

                    b.Property<int?>("TicketsSold")
                        .HasColumnType("integer")
                        .HasColumnName("tickets_sold");

                    b.HasKey("DjSetId");

                    b.ToTable("set_analytics");
                });

            modelBuilder.Entity("_1001.SetSong", b =>
                {
                    b.Property<int>("SetSongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("set_song_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SetSongId"));

                    b.Property<int>("DjSetId")
                        .HasColumnType("integer")
                        .HasColumnName("dj_set_id");

                    b.Property<int>("SongId")
                        .HasColumnType("integer")
                        .HasColumnName("song_id");

                    b.Property<int?>("TimestampInSetSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("timestamp_in_set_seconds");

                    b.HasKey("SetSongId");

                    b.HasIndex("DjSetId");

                    b.HasIndex("SongId");

                    b.ToTable("set_songs");
                });

            modelBuilder.Entity("_1001.Song", b =>
                {
                    b.Property<int>("SongId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("song_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SongId"));

                    b.Property<int?>("Bpm")
                        .HasColumnType("integer")
                        .HasColumnName("bpm");

                    b.Property<int?>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("duration_seconds");

                    b.Property<string>("Genre")
                        .HasColumnType("text")
                        .HasColumnName("genre");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date")
                        .HasColumnName("release_date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("title");

                    b.HasKey("SongId");

                    b.ToTable("songs");
                });

            modelBuilder.Entity("_1001.SongArtist", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("integer")
                        .HasColumnName("song_id");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer")
                        .HasColumnName("artist_id");

                    b.HasKey("SongId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.ToTable("song_artists");
                });

            modelBuilder.Entity("_1001.Venue", b =>
                {
                    b.Property<int>("VenueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("venue_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("VenueId"));

                    b.Property<string>("Address")
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<int?>("Capacity")
                        .HasColumnType("integer")
                        .HasColumnName("capacity");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("VenueId");

                    b.ToTable("venues");
                });

            modelBuilder.Entity("_1001.DjSet", b =>
                {
                    b.HasOne("_1001.Artist", "Artist")
                        .WithMany("DjSets")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("_1001.Venue", "Venue")
                        .WithMany("DjSets")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Artist");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("_1001.SetAnalytics", b =>
                {
                    b.HasOne("_1001.DjSet", "DjSet")
                        .WithOne("SetAnalytics")
                        .HasForeignKey("_1001.SetAnalytics", "DjSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DjSet");
                });

            modelBuilder.Entity("_1001.SetSong", b =>
                {
                    b.HasOne("_1001.DjSet", "DjSet")
                        .WithMany("SetSongs")
                        .HasForeignKey("DjSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_1001.Song", "Song")
                        .WithMany("SetSongs")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DjSet");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("_1001.SongArtist", b =>
                {
                    b.HasOne("_1001.Artist", "Artist")
                        .WithMany("SongArtists")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("_1001.Song", "Song")
                        .WithMany("SongArtists")
                        .HasForeignKey("SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");

                    b.Navigation("Song");
                });

            modelBuilder.Entity("_1001.Artist", b =>
                {
                    b.Navigation("DjSets");

                    b.Navigation("SongArtists");
                });

            modelBuilder.Entity("_1001.DjSet", b =>
                {
                    b.Navigation("SetAnalytics");

                    b.Navigation("SetSongs");
                });

            modelBuilder.Entity("_1001.Song", b =>
                {
                    b.Navigation("SetSongs");

                    b.Navigation("SongArtists");
                });

            modelBuilder.Entity("_1001.Venue", b =>
                {
                    b.Navigation("DjSets");
                });
#pragma warning restore 612, 618
        }
    }
}
